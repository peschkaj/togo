// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
	"time"
)

const addOrUpdateTask = `-- name: AddOrUpdateTask :exec
INSERT INTO togo.tasks (name, description, created_on, completed_on, due_date)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (name) DO UPDATE
    SET description = $2, created_on = $3, completed_on = $4, due_date = $5
`

type AddOrUpdateTaskParams struct {
	Name        string
	Description string
	CreatedOn   time.Time
	CompletedOn sql.NullTime
	DueDate     sql.NullTime
}

func (q *Queries) AddOrUpdateTask(ctx context.Context, arg AddOrUpdateTaskParams) error {
	_, err := q.db.Exec(ctx, addOrUpdateTask,
		arg.Name,
		arg.Description,
		arg.CreatedOn,
		arg.CompletedOn,
		arg.DueDate,
	)
	return err
}

const allTasks = `-- name: AllTasks :many
SELECT id, name, description, created_on, completed_on, due_date FROM togo.tasks
`

func (q *Queries) AllTasks(ctx context.Context) ([]TogoTask, error) {
	rows, err := q.db.Query(ctx, allTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TogoTask{}
	for rows.Next() {
		var i TogoTask
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedOn,
			&i.CompletedOn,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countTasks = `-- name: CountTasks :one
SELECT COUNT(*) FROM togo.tasks
`

func (q *Queries) CountTasks(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTasks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findByDueDate = `-- name: FindByDueDate :many
SELECT id, name, description, created_on, completed_on, due_date FROM togo.tasks WHERE due_date = $1
`

func (q *Queries) FindByDueDate(ctx context.Context, dueDate sql.NullTime) ([]TogoTask, error) {
	rows, err := q.db.Query(ctx, findByDueDate, dueDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TogoTask{}
	for rows.Next() {
		var i TogoTask
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedOn,
			&i.CompletedOn,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByName = `-- name: FindByName :one
SELECT id, name, description, created_on, completed_on, due_date FROM togo.tasks WHERE name = $1
`

func (q *Queries) FindByName(ctx context.Context, name string) (TogoTask, error) {
	row := q.db.QueryRow(ctx, findByName, name)
	var i TogoTask
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedOn,
		&i.CompletedOn,
		&i.DueDate,
	)
	return i, err
}

const findOverdueTasks = `-- name: FindOverdueTasks :many
SELECT id, name, description, created_on, completed_on, due_date FROM togo.tasks WHERE due_date < $1
`

func (q *Queries) FindOverdueTasks(ctx context.Context, dueDate sql.NullTime) ([]TogoTask, error) {
	rows, err := q.db.Query(ctx, findOverdueTasks, dueDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TogoTask{}
	for rows.Next() {
		var i TogoTask
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedOn,
			&i.CompletedOn,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTask = `-- name: RemoveTask :exec
DELETE FROM togo.tasks WHERE name = $1
`

func (q *Queries) RemoveTask(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, removeTask, name)
	return err
}
